using System;
using Billing.DAL;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Billing.Entities;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Owin;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Options;

namespace Billing.Web
{
    // Configure the application user manager used in this application. UserManager is defined in ASP.NET Identity and is used by the application.
    public class UserManager<ApplicationUser> : UserManager<ApplicationUser>
    {
        public UserManager<ApplicationUser>(IUserStore<ApplicationUser> store) 
            : base()
        {
        }

        public static UserManager<ApplicationUser> Create(HttpContext context)
        {
            var manager = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(context.Get<ApplicationDbContext>()));
            // Configure validation logic for usernames
            manager.UserValidators.Add(new UserValidator<ApplicationUser>());
            // Configure validation logic for passwords
            manager.PasswordValidators.Add(new PasswordValidator<ApplicationUser>() {RequiredLength = 6, RequireNonLetterOrDigit = true, RequireDigit = true, RequireLowercase = true, RequireUppercase = true, });
            // Configure user lockout defaults
            manager.SupportsUserLockout = true;
            manager.DefaultAccountLockoutTimeSpan = TimeSpan.FromMinutes(5);
            manager.MaxFailedAccessAttemptsBeforeLockout = 5;
            // Register two factor authentication providers. This application uses Phone and Emails as a step of receiving a code for verifying the user
            // You can write your own provider and plug it in here.
            manager.RegisterTwoFactorProvider("Phone Code", new PhoneNumberTokenProvider<ApplicationUser>{MessageFormat = "Your security code is {0}"});
            manager.RegisterTwoFactorProvider("Email Code", new EmailTokenProvider<ApplicationUser>{Subject = "Security Code", BodyFormat = "Your security code is {0}"});

            return manager;
        }
    }

    // Configure the application sign-in manager which is used in this application.
    public class SignInManager<ApplicationUser> : SignInManager<ApplicationUser>
    {
        public SignInManager<ApplicationUser>(UserManager<ApplicationUser> userManager, HttpContext authenticationManager) : base(userManager, authenticationManager)
        {
        }

        public async override Task<ClaimsPrincipal> CreateUserPrincipalAsync(ApplicationUser user)
        {
            var claimsIdentity = await user.GenerateUserIdentityAsync((UserManager<ApplicationUser>)UserManager);
            return new ClaimsPrincipal(claimsIdentity);
        }

        public static SignInManager<ApplicationUser> Create(HttpContext context)
        {
            return new SignInManager<ApplicationUser>(context.GetUserManager<UserManager<ApplicationUser>>(), context.Authentication);
        }

        public async Task<SignInResult> PasswordEmailSignInAsync(string email, string password, bool isPersistent, bool shouldLockout)
        {
            var user = await UserManager.FindByEmailAsync(email);
            if (user == null)
            {
                return SignInResult.Failed;
            }
            else
            {
                return await PasswordSignInAsync(user.UserName, password, isPersistent, shouldLockout);
            }
        }
    }
}